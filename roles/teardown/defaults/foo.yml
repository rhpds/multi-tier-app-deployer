---
- name: Remove Postgres packages
  ansible.builtin.package:
    name: "{{ __package }}"
    state: absent
  loop:
    - "{{ postgres_packages }}"
  loop_control:
    loop_var: __package

- name: Remove Postgres 12 data directory
  ansible.builtin.file:
    path: /var/lib/pgsql/12
    state: absent

- name: Remove Postgres user
  ansible.builtin.user:
    name: postgres
    state: absent

    flask_app_name: resource_hub
    flask_user: flask
    flask_home: /opt/
    flask_repo: https://github.com/redhat-gpe/multi-tier-app.git
    flask_scm_ref: main
    flask_app_lauch_script: /usr/local/bin/launch_resource_hub
    virtualenv_name: "venv-{{ flask_app_name }}"
    virtualenv_home: /opt/virtual_envs
    virtualenv_python: /usr/bin/python3
    pip_dependencies: []
    # - virtualenv
    # - pip
    # - psycopg2-binary


- name: Clean up service when it exists
  block:

    - name: Check if systemd flask app service file exists
      ansible.builtin.stat:
        path: "/etc/systemd/system/{{ flask_app_name }}.service"
      register: r_flask_service

    - when: r_flask_service.stat.exists
      name: Systemd configuration needs stopped and removed
      block:

        - name: Stop systemd flask app service
          ansible.builtin.service:
            name: "{{ flask_app_name }}.service"
            state: stopped
            enabled: false
        # ignore_errors: yes

        - name: Remove systemd flask app service file
          ansible.builtin.file:
            path: "{{ __path }}"
            state: absent
          loop:
            - "/etc/systemd/system/{{ flask_app_name }}.service"
            - "/usr/local/bin/launch_resource_hub"
          loop_control:
            loop_var: __path

#   - name: Remove pre-requisite pip3 packages
#     pip:
#       name: "{{ pip_dependencies }}"
#       state: absent
#       executable: /usr/bin/pip
#     # ignore_errors: yes

- name: Remove flask user
  ansible.builtin.user:
    name: "{{ flask_user }}"
    state: absent

- name: Remove app yum packages
  ansible.builtin.package:
    name: "{{ __package }}"
    state: absent
  loop: "{{ app_yum_packages }}"
  loop_control:
    loop_var: __package

- name: Remove flask repo and virtualenv
  ansible.builtin.file:
    path: "{{ __path }}"
    state: absent
  loop:
    - "{{ flask_home }}/{{ flask_app_name }}"
    - "{{ virtualenv_home }}/{{ flask_app_name }}"
  loop_control:
    loop_var: __path

vars:
load_balancer_packages:
  - haproxy

- name: Remove load balancer packages
  ansible.builtin.package:
    name: "{{ load_balancer_packages }}"
    state: absent

- name: configure haproxy
  ansible.builtin.file:
    path: /etc/haproxy/haproxy.cfg
    state: absent

...
